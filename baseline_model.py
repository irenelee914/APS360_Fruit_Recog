# -*- coding: utf-8 -*-
"""Baseline Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1txV2FBUwl4leF36cxTMXwWD8qMQZ1t6W
"""

#mount googledrive
from google.colab import drive
import os
import numpy as np
drive.mount('/content/drive')

from skimage.io import imread_collection
from skimage.transform import rescale, resize, rotate

master_path = '/content/drive/My Drive/APS360/Baseline_Fruits360'
train_dir = os.path.join(master_path, 'Train/')
val_dir = os.path.join(master_path, 'Validation/')
test_dir = os.path.join(master_path, 'Test/')

all_images, labels = [], []
classes = ['Apple_Crimson_Snow', 'Apple_Granny_Smith','Apple_Pink_Lady', 'Apple_Red_Delicious','Apricot', 'Avocado','Banana', 
          'Clementine','Cocos', 'Guava','Lemon','Limes','Lychee','Mandarine', 'Mango', 'Nectarine',
          'Orange', 'Peach','Peach_Flat', 'Pear', 'Pear_Abate','Pear_Forelle','Pear_Kaiser','Pear_Monster','Pear_Red', 'Pear_Williams',
          'Plum','Pomegranate',  'Strawberry', 'Walnut']


for c in classes:
  directory = os.path.join(train_dir, c + '/*.jpg')
  images = imread_collection(directory)
  n = 0
  for img in images:
    if n%3==0:
      all_images.append(rotate(img, 180))
    elif n%3 ==1:
      rescaled = rescale(img, 0.25, anti_aliasing = True)
      all_images.append(rescaled)
    else:
      all_images.append(img)
    n+=1
    class_label = [c for i in range(len(images))]
  #all_images.extend(images)
  print(len(images))    
  labels.extend(class_label)

all_images = np.array(all_images)
all_images = all_images.reshape(len(all_images), -1)
labels = np.array(labels)

from sklearn import svm, metrics
print(all_images.shape)
print(labels.shape)
clf =  svm.LinearSVC()
clf.fit(all_images, labels)

all_test_images, test_labels = [], []
class_label = []
for c in classes:
  directory = os.path.join('/content/drive/My Drive/APS360/Baseline_Fruits360/Test/', c + '/*.jpg')
  images = imread_collection(directory)
  n = 0
  for img in images:
    if n%3==0:
      all_test_images.append(rotate(img, 80))
    elif n%3 ==1:
      rescaled = rescale(img, 0.25, anti_aliasing = True)
      all_test_images.append(rescaled)
    else:
      all_test_images.append(img)
    n += 1
  class_label = [c for i in range(len(images))]
  print(c)
  print(len(images))
  test_labels.extend(class_label)

all_test_images = np.array(all_test_images)
all_test_images = all_test_images.reshape(len(all_test_images), -1)
test_labels = np.array(test_labels)

#Measuring the accuracy
count=0 
total = np.shape(all_test_images)[0]
#print(total)
for i in range(total):
    check=clf.predict([all_test_images[i]])
    if check[0] == test_labels[i] :
        count += 1
print(count)
print("Accuracy is ", count/total)