# -*- coding: utf-8 -*-
"""Stage2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U8XcHFRoNQztn6eEwiFurUSRdOwKtsQt
"""

#mount googledrive
from google.colab import drive
drive.mount('/content/gdrive')

import numpy as np

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# sudo -H pip3 install numpy==1.17.4
# 
# 
# # Install pycocotools
# git clone https://github.com/cocodataset/cocoapi.git
# cd cocoapi/PythonAPI
# python setup.py build_ext install

print(np.__version__)

"""## Images"""

#Trying to see if Images work from Training

from PIL import Image
img = Image.open('/content/gdrive/My Drive/Colab Notebooks/Stage_2/Images/apple_14.jpg')

#Try to extract bounding box information from .XML file
from xml.dom import minidom
import torch
from matplotlib import pyplot as plt
import matplotlib.patches as patches

fig, ax = plt.subplots(1)
ax.imshow(img)  

xmldoc = minidom.parse('/content/gdrive/My Drive/Colab Notebooks/Stage_2/Labels/apple_14.xml')
itemlist = xmldoc.getElementsByTagName('object')
print("Number of Apples in this pic:", len(itemlist))




for item in itemlist:
  boxes = []
  bndbox = item.getElementsByTagName("bndbox")[0]
  xmin = bndbox.getElementsByTagName("xmin")[0]
  ymin = bndbox.getElementsByTagName("ymin")[0]
  xmax = bndbox.getElementsByTagName("xmax")[0]
  ymax = bndbox.getElementsByTagName("ymax")[0]
  
  boxes.append([float(xmin.firstChild.data), float(ymin.firstChild.data), float(xmax.firstChild.data), float(ymax.firstChild.data)])
  boxes = torch.as_tensor(boxes, dtype=torch.float32)
  print(img.size)

  for idx in range(len(boxes)):
    left, bot, right, top = boxes[idx]
    x, y, w, h = [val * 1 for val in [left, bot, right - left, top - bot]]
    rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='b', facecolor='none')
    ax.add_patch(rect)
    print(xmin.firstChild.data, ymin.firstChild.data, xmax.firstChild.data,ymax.firstChild.data)

import os
import numpy as np
import torch
import torch.utils.data
from PIL import Image


# location on Google Drive
master_path = '/content/gdrive/My Drive/Colab Notebooks/Stage_2/'

class fruitDataSet(torch.utils.data.Dataset):
    def __init__(self, root, transforms=None):
        self.root = root
        self.transforms = transforms
        # load all image files, sorting them to
        # ensure that they are aligned
        self.imgs = list(sorted(os.listdir(os.path.join(root, "Images"))))
        self.labels = list(sorted(os.listdir(os.path.join(root, "Labels"))))

    def __getitem__(self, idx):
        # load images and masks
        img_path = os.path.join(self.root, "Images", self.imgs[idx])
        label_path = os.path.join(self.root, "Labels", self.labels[idx])
        img = Image.open(img_path).convert("RGB")
        # note that we haven't converted the mask to RGB,
        # because each color corresponds to a different instance
        # with 0 being background
       # mask = Image.open(mask_path)

        #mask = np.array(mask)
        # instances are encoded as different colors
        #obj_ids = np.unique(mask)
        # first id is the background, so remove it
        #obj_ids = obj_ids[1:]

        # split the color-encoded mask into a set
        # of binary masks
        #masks = mask == obj_ids[:, None, None]

        # get bounding box coordinates for each .xml file


        xmldoc = minidom.parse(label_path)
        itemlist = xmldoc.getElementsByTagName('object')

        num_objs = len(itemlist)
        boxes = []
        for item in itemlist:
            bndbox = item.getElementsByTagName("bndbox")[0]
            xmin = bndbox.getElementsByTagName("xmin")[0]
            xmax = bndbox.getElementsByTagName("xmax")[0]
            ymin = bndbox.getElementsByTagName("ymin")[0]
            ymax = bndbox.getElementsByTagName("ymax")[0]
            boxes.append([int(xmin.firstChild.data), int(ymin.firstChild.data), int(xmax.firstChild.data),
                          int(ymax.firstChild.data)])
            print(boxes)

        boxes = torch.as_tensor(boxes, dtype=torch.float32)
        # there is only one class 
   
        labels_ = torch.ones((num_objs,), dtype=torch.int64)
       # masks = torch.as_tensor(masks, dtype=torch.uint8)

        image_id = torch.tensor([idx])
        area = (boxes[:, 3] - boxes[:, 1]) * (boxes[:, 2] - boxes[:, 0])
        # suppose all instances are not crowd
        iscrowd = torch.zeros((num_objs,), dtype=torch.int64)

        target = {}
        target["boxes"] = boxes
        target["labels"] = labels_
        #target["masks"] = masks
        target["image_id"] = image_id
        target["area"] = area
        target["iscrowd"] = iscrowd

        if self.transforms is not None:
            img, target = self.transforms(img, target)

        return img, target

    def __len__(self):
        return len(self.imgs)

"""SSD but lets use faster_rcnn for now"""

import torchvision
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
#from torchvision.models.detection.mask_rcnn import MaskRCNNPredictor

      
def detectionModel(num_classes):
    # load an instance segmentation model pre-trained on COCO
    model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)

    # get the number of input features for the classifier
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    # replace the pre-trained head with a new one
    #model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # now get the number of input features for the mask classifier
    #in_features_mask = model.roi_heads.mask_predictor.conv5_mask.in_channels
    #hidden_layer = 256
    # and replace the mask predictor with a new one
    # model.roi_heads.mask_predictor = MaskRCNNPredictor(in_features_mask,
    #                                                    hidden_layer,
    #                                                    num_classes)
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes) 

    return model

"""#Data Loader

# Train
"""

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# 
# # Install pycocotools
# git clone https://github.com/cocodataset/cocoapi.git
# cd cocoapi/PythonAPI
# python setup.py build_ext install

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# 
# # Download TorchVision repo to use some files from
# # references/detection
# git clone https://github.com/pytorch/vision.git
# cd vision
# git checkout v0.3.0
# 
# cp references/detection/utils.py ../
# cp references/detection/transforms.py ../
# cp references/detection/coco_eval.py ../
# cp references/detection/engine.py ../
# cp references/detection/coco_utils.py ../

from engine import train_one_epoch, evaluate
import utils
import transforms as T


def get_transform(train):
    transforms = []
    # converts the image, a PIL image, into a PyTorch Tensor
    transforms.append(T.ToTensor())
    if train:
        # during training, randomly flip the training images
        # and ground-truth for data augmentation
        transforms.append(T.RandomHorizontalFlip(0.5))
    return T.Compose(transforms)

# use our dataset and defined transformations
dataset = fruitDataSet(master_path, get_transform(train=True))
dataset_test = fruitDataSet(master_path, get_transform(train=False))

# split the dataset in train and test set
torch.manual_seed(1)
indices = torch.randperm(len(dataset)).tolist()
dataset = torch.utils.data.Subset(dataset, indices[:-50])
dataset_test = torch.utils.data.Subset(dataset_test, indices[-50:])

# define training and validation data loaders
data_loader = torch.utils.data.DataLoader(
    dataset, batch_size=2, shuffle=True, num_workers=4,
    collate_fn=utils.collate_fn)

data_loader_test = torch.utils.data.DataLoader(
    dataset_test, batch_size=1, shuffle=False, num_workers=4,
    collate_fn=utils.collate_fn)

device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

# our dataset has two classes only - background and person
num_classes = 2

# get the model using our helper function
model = detectionModel(num_classes)
# move model to the right device
model.to(device)

# construct an optimizer
params = [p for p in model.parameters() if p.requires_grad]
optimizer = torch.optim.SGD(params, lr=0.005,
                            momentum=0.9, weight_decay=0.0005)

# and a learning rate scheduler which decreases the learning rate by
# 10x every 3 epochs
lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer,
                                               step_size=3,
                                               gamma=0.1)

# let's train it for 10 epochs
num_epochs = 10

for epoch in range(num_epochs):
    # train for one epoch, printing every 10 iterations
    train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq=10)
    # update the learning rate
    lr_scheduler.step()
    # evaluate on the test dataset
    evaluate(model, data_loader_test, device=device)

# pick one image from the test set
img, _ = dataset_test[31]
# put the model in evaluation mode
model.eval()
with torch.no_grad():
    prediction = model([img.to(device)])

prediction

Image.fromarray(img.mul(255).permute(1, 2, 0).byte().numpy())

import matplotlib.patches as patches
fig, ax = plt.subplots(1)
image = Image.fromarray(img.mul(255).permute(1, 2, 0).byte().numpy())
ax.imshow(image)

bboxes = prediction[0]['boxes'].byte().cpu().numpy()
print(len(bboxes))
for idx in range(len(bboxes)):
        left, bot, right, top = bboxes[idx]
        x, y, w, h = [val * 1 for val in [left, bot, right - left, top - bot]]
        rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='b', facecolor='none')
        ax.add_patch(rect)
plt.show()

from matplotlib import pyplot as plt
import matplotlib.patches as patches

fig, ax = plt.subplots(1)
image = Image.fromarray(img.mul(255).permute(1, 2, 0).byte().numpy())
ax.imshow(image)  

print(len(prediction[0]['masks']))

for i in range(len(prediction[0]['masks'])):
  mask = np.array(Image.fromarray(prediction[0]['masks'][i, 0].mul(255).byte().cpu().numpy()))
  masks = mask == obj_ids[:, None, None]
  boxes = []

  pos = np.where(masks[0])
  xmin = np.min(pos[1])
  xmax = np.max(pos[1])
  ymin = np.min(pos[0])
  ymax = np.max(pos[0])
  boxes.append([xmin, ymin, xmax, ymax])
  print(boxes)
  boxes = torch.as_tensor(boxes, dtype=torch.float32)

  for idx in range(len(boxes)):
          left, bot, right, top = boxes[idx]
          x, y, w, h = [val * 1 for val in [left, bot, right - left, top - bot]]
          rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='r', facecolor='none')
          ax.add_patch(rect)

      
#plt.show()

prediction[0]['boxes'].byte().cpu().numpy()
#Image.fromarray(prediction[0]['boxes'].byte().cpu().numpy())